DAA Project Documentation

Given an MxN matrix and a number K (K<M and K<N), our code searches for 3 disjoint matrices of order KxK such that their total sum is maximised.

1. Compiling Instructions
	Proper compiling instructions are to be done as stated in the makefile. The max sum of the 3 matrices are then outputted on the screen.
	$make

2. Execution indtructions
	$./main <path/filename> <K>

3. Pseudo Code of the Algorithm

We first choose two matrices of order K x K. The third matrix has to be the maximum K x K matrix such that it does not intersect with the other two.

Choosing the first two matrices is O(MN)^2. We check the remaining region for the maximum matrix. By storing the maximum K x K matrix in different possible areas in an array of size M x N x 4 (stored in O(MN)^2), this can be obtained in order one.

Order of algorithm - O(MN)^2


	a)main()
        sumArray[M][N] stores the partial sums of all the K x K matrices
        areas[M][N][4] stores the maximum K x K matrix in a given area
        getMaxSum() returns the maximum sum of three disjoint matrices for the given input

	b)inputFunction:
		//Takes input and stores in a 2D matrix.
		input>>M;
		input>>N;
		int** inputArray = new int*[M];
		for j=0 to N
	        for i=0 to M
	            input>>inputArray[i][j];
		return inputArray;

	c)getSumArray:
	    //Calculates sum of submatrix and stores in a 2D matrix for further processing.
		for i=0 to M-K+1
	        for j=0 to N-K+1
	            sum=0;
	            for x=i to i+K
	                for y=j to j+K
	                    sum=sum+inputArray[x][y];
	            sumArray[i][j]=sum;
		return sumArray;

    d)getMaxinArea:
        //stores max K x K matrix in every possible area size from 1 x 1 to M x N in the four corners of the input matrix
        //Note - the middle areas are not necessary as those are never called in Tfun
        for i=1 to M
            for j=0 to N
                fourCorners(area,i,j)

    e)fourCorners:
        //max K x K matrix in area of size i X j from all four corners
        area[i][j][0]=maxMatrix(top left corner)
        area[i][j][1]=maxMatrix(top right corner)
        area[i][j][2]=maxMatrix(bottom right corner)
        area[i][j][3]=maxMatrix(bottom left corner)

    f)matrixMax:
        //returns max K x K matrix in an area defined from (startx,starty) to (endx,endy)
        int max=0
        for i=startx to endx
            for j=starty to end y
                max=MAX(max,sumArray[i][[j])

        return max

    g)getMaxSum:
        //select first two matrices
        int sum=0
        for i=0 to M
            for j=0 to N
                for x=0 to M
                    for y=0 to N
                        int max=0

                        a = Tfunc(x-1,y-1)  //T function for top left corner
                        b = Tfunc(x-1,y+K)  //T function for bottom left corner
                        c = Tfunc(x+K,y-1)  //T function for top right corner
                        d = Tfunc(x+K,y+K)  //T function for bottom right corner
                        //e = bottom(y+K)
                        //f = right(x+K)
                        max=MAX(a,b,c,d)

                        sum=MAX(sum,sumArray[i][j] + sumArray[x][y] + max)

        return sum

	h)intersect(w,x,y,z,a,b,k):
		//Given the coordinates of an area and a upper left coordinated of the matrix, it checks if the matrix intersects with the area.
		if(arealength<k)or(areabreadth<K)
			return 1;
		else if (isInside(w, x, y, z, a, b))or(isInside(w, x, y, z, a+k-1, b))or(isInside(w, x, y, z, a, b+k-1))or(isInside(w, x, y, z, a+k-1, b+k-1))
			return 1;
		else
			return 0;

	i)isInside(w,x,y,z,a,b):
		//Checks if given point (a,b) is inside the given region.
		if(a>=w)and(a<=y)and(b>=x)and(b<=z)
	        return 1;
	    else
			return 0;

	i)tfunc.cpp:
		tfunc():
			//takes the area array, the top-left coordinates of two matrices and the coordinates of a point, the rows and colms of the input matrix, and a given k of whose order, matrices are got.
			The regions checked are the 4 regions each from the 4 corners to the given pt.

			The foll if condns represent those regions checked:-

			if((!intersect(my,0,M-1,mx,fy,fx,K)) && (!intersect(my,0,M-1,mx,sy,sx,K)))
				a=areas(this region)
			if((!intersect(my,mx,M-1,N-1,fy,fx,K)) && (!intersect(my,mx,M-1,N-1,sy,sx,K)))
				b=areas(this region)
			if((!intersect(0,0,my,mx,fy,fx,K)) && (!intersect(0,0,my,mx,sy,sx,K)))
				c=areas(this region)
			if((!intersect(0,mx,my,N-1,fy,fx,K)) && (!intersect(0,mx,my,N-1,sy,sx,K)))
				d=areas(this region)

			return max(a,b,c,d) //This returns the max of all matrices of the regions; thus the 3rd matrix


4. Data Structures Used
	We used the data structure arrays, consisting of both 2-dimensional as well as 3-dimensional ones.

5. Defects in Code
	i) Algorithm is of O(mn)^2 so it can take an input of maximum size approximately 100 X 100 (to execute under a minute; upto 50 x 50 within 3 seconds).
	ii) If, in a test case, 3 matrixes of kXk are not possible but 2 are possible, the algorithm returns sum of the 2 maximim possible matrix rather than throwing exception.(testCase/exception.dat), in a test case, 3 matrixes of kXk are not possible but 2 are possible, the algorithm throws exception.(testCase/exception1.dat, testCase/exception2.dat)


6. Individual Contributions
	We discussed and came up with a possible yet efficient enough algorithm, together. When it came to coding and implementation:-
	Anshul- wrote the functions in main.cpp, maximum K x K matrix in a given area in areas.cpp, parallel.cpp helped in debugging as well as documentation
	Raghav- wrote the intersect function as well as the input.cpp, helped in debugging as well as documentation
	Pranav- wrote the tfunc.cpp, helped in debugging as well as documentation

 7. Exception/Negative test case
 	i)If, in a test case, 3 matrixes of kXk are not possible but 2 are possible, the algorithm throws exception.(testCase/exception1.dat, testCase/exception2.dat)
	ii)If K>M or K>N, the test case has no solution.
